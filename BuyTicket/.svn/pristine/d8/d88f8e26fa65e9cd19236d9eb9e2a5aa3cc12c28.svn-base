package com.buyticket.dto;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JOptionPane;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.buyticket.core.My12306Exception;
import com.buyticket.ui.LoginFrm;
import com.buyticket.ui.MainFrm;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONString;
@SuppressWarnings("unused")
public class ResultData implements Serializable{
	static Log log=LogFactory.getLog(ResultData.class);
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String validateMessagesShowId;
	private boolean status;
	private int httpstatus;
	private JSONObject dataObj;//{"result":"0","msg":"EXPIRED"} 
	private JSONArray dataArr;//["result":"0","msg":"EXPIRED"] 
	private String dataStr;//data:""
	private JSONArray messages;//[]
	private JSONObject validateMessages;//{}
	private String url;
	public ResultData(String json) throws My12306Exception{
		/*if(json==null||json.ch>-1){
			throw new My12306Exception("要json,但是是html,12306返回错误");
		}*/
		
		JSONObject jsonObj=null;
		try{
			jsonObj= JSONObject.fromObject(json);
		}catch(Exception e){
			log.error("12306 返回错误,没返回json"+json);
			throw new My12306Exception("12306 返回错误,没返回json");
		}
		for(Object e :jsonObj.entrySet()){
			@SuppressWarnings("unchecked")
			Map.Entry<String,Object> entry=(Entry<String, Object>)e;
			String field=entry.getKey();
			try {
				if(field.equals("data")){
					if(entry.getValue() instanceof JSONObject){
						field=field+"Obj";
					}else if(entry.getValue() instanceof JSONArray){
						field=field+"Arr";
					}else if(entry.getValue() instanceof String){
						field=field+"Str";
					}
				}
				ResultData.class.getDeclaredField(field).set(this, entry.getValue());
			} catch (IllegalArgumentException e1) {
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				e1.printStackTrace();
			} catch (NoSuchFieldException e1) {
				e1.printStackTrace();
			} catch (SecurityException e1) {
				e1.printStackTrace();
			}
			
		}
		if(getErrorMessage()!=null && !"".equals(getErrorMessage())){
			throw new My12306Exception(getErrorMessage());
		}
		
	}
	public String toString(){
		Field[] fileds= ResultData.class.getDeclaredFields();
		StringBuffer sb=new StringBuffer();
		for (int i = 0; i < fileds.length; i++) {
			try {
				sb.append(fileds[i].getName()+":"+fileds[i].get(this)+"\r\n");
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		return sb.toString();
	}
	public String getValidateMessagesShowId() {
		return validateMessagesShowId;
	}
	public void setValidateMessagesShowId(String validateMessagesShowId) {
		this.validateMessagesShowId = validateMessagesShowId;
	}
	public boolean isStatus() {
		return status;
	}
	public void setStatus(boolean status) {
		this.status = status;
	}
	public int getHttpstatus() {
		return httpstatus;
	}
	public void setHttpstatus(int httpstatus) {
		this.httpstatus = httpstatus;
	}
	
	public JSONObject getDataObj() {
		return dataObj;
	}
	public void setDataObj(JSONObject dataObj) {
		this.dataObj = dataObj;
	}
	public JSONArray getDataArr() {
		return dataArr;
	}
	public void setDataArr(JSONArray dataArr) {
		this.dataArr = dataArr;
	}
	
	public String getDataStr() {
		return dataStr;
	}
	public void setDataStr(String dataStr) {
		this.dataStr = dataStr;
	}
	public JSONArray getMessages() {
		return messages;
	}
	public void setMessages(JSONArray messages) {
		this.messages = messages;
	}
	public JSONObject getValidateMessages() {
		return validateMessages;
	}
	public void setValidateMessages(JSONObject validateMessages) {
		this.validateMessages = validateMessages;
	}
	public static long getSerialversionuid() {
		return serialVersionUID;
	}
	
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public String getErrorMessage(){
		if(messages!=null && messages.size()>0 && messages.get(0)!=null){
			return messages.get(0).toString();
		}else if(getDataObj()!=null && getDataObj().containsKey("errMsg")){
			return getDataObj().getString("errMsg");
		}
		return "";
	}
	public static void main(String[] args) throws My12306Exception {
		String s="{\"validateMessagesShowId\":\"_validatorMessage\",\"status\":true,\"httpstatus\":200,\"data\":{\"otherMsg\":\"\",\"loginCheck\":\"Y\"},\"messages\":[],\"validateMessages\":{}}";
		ResultData r=new ResultData(s);
		System.out.println(r);
	}
}
